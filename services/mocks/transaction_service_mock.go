// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/transaction_service/transaction_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payload "github.com/kelompok4-loyaltypointagent/backend/dto/payload"
	response "github.com/kelompok4-loyaltypointagent/backend/dto/response"
	helper "github.com/kelompok4-loyaltypointagent/backend/helper"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CallbackXendit mocks base method.
func (m *MockTransactionService) CallbackXendit(payload map[string]interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallbackXendit", payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallbackXendit indicates an expected call of CallbackXendit.
func (mr *MockTransactionServiceMockRecorder) CallbackXendit(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallbackXendit", reflect.TypeOf((*MockTransactionService)(nil).CallbackXendit), payload)
}

// Cancel mocks base method.
func (m *MockTransactionService) Cancel(id any) (*response.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", id)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTransactionServiceMockRecorder) Cancel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTransactionService)(nil).Cancel), id)
}

// Create mocks base method.
func (m *MockTransactionService) Create(payload payload.TransactionPayload, claims *helper.JWTCustomClaims) (*response.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payload, claims)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionServiceMockRecorder) Create(payload, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionService)(nil).Create), payload, claims)
}

// Delete mocks base method.
func (m *MockTransactionService) Delete(id any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionService)(nil).Delete), id)
}

// FindAllDetail mocks base method.
func (m *MockTransactionService) FindAllDetail(claims *helper.JWTCustomClaims, filter any) (*[]response.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDetail", claims, filter)
	ret0, _ := ret[0].(*[]response.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDetail indicates an expected call of FindAllDetail.
func (mr *MockTransactionServiceMockRecorder) FindAllDetail(claims, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDetail", reflect.TypeOf((*MockTransactionService)(nil).FindAllDetail), claims, filter)
}

// FindByID mocks base method.
func (m *MockTransactionService) FindByID(id any, claims *helper.JWTCustomClaims) (*response.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id, claims)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTransactionServiceMockRecorder) FindByID(id, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTransactionService)(nil).FindByID), id, claims)
}

// GetInvoiceURL mocks base method.
func (m *MockTransactionService) GetInvoiceURL(id, userId string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceURL", id, userId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceURL indicates an expected call of GetInvoiceURL.
func (mr *MockTransactionServiceMockRecorder) GetInvoiceURL(id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceURL", reflect.TypeOf((*MockTransactionService)(nil).GetInvoiceURL), id, userId)
}

// Update mocks base method.
func (m *MockTransactionService) Update(payload payload.TransactionUpdatePayload, id any) (*response.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", payload, id)
	ret0, _ := ret[0].(*response.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTransactionServiceMockRecorder) Update(payload, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionService)(nil).Update), payload, id)
}
